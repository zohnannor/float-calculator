import { numTo64BitBinary, binToFloat, floatToNum } from './logic';

test('converts number to binary form', () => {
  expect(numTo64BitBinary(0x3ff0000000000000n)).toBe(
    '0011111111110000000000000000000000000000000000000000000000000000'
  );
});

test.each`
  num                                                                    | float
  ${0b0011111111110000000000000000000000000000000000000000000000000000n} | ${1}
  ${0b0011111111110000000000000000000000000000000000000000000000000001n} | ${1.0000000000000002}
  ${0b0011111111110000000000000000000000000000000000000000000000000010n} | ${1.0000000000000004}
  ${0b0100000000000000000000000000000000000000000000000000000000000000n} | ${2.0}
  ${0b1100000000000000000000000000000000000000000000000000000000000000n} | ${-2.0}
  ${0b0000000000000000000000000000000000000000000000000000000000000001n} | ${5e-324}
  ${0b0000000000001111111111111111111111111111111111111111111111111111n} | ${2.225073858507201e-308}
  ${0b0000000000010000000000000000000000000000000000000000000000000000n} | ${2.2250738585072014e-308}
  ${0b0111111111101111111111111111111111111111111111111111111111111111n} | ${1.7976931348623157e308}
  ${0b0000000000000000000000000000000000000000000000000000000000000000n} | ${0.0}
  ${0b1000000000000000000000000000000000000000000000000000000000000000n} | ${-0.0}
  ${0b0111111111110000000000000000000000000000000000000000000000000000n} | ${Infinity}
  ${0b1111111111110000000000000000000000000000000000000000000000000000n} | ${-Infinity}
  ${0b0111111111111111111111111111111111111111111111111111111111111111n} | ${NaN}
  ${0b0111111111111000000000000000000000000000000000000000000000000000n} | ${NaN}
  ${0b1111111111110000000000000000000000000001100000000000000000000000n} | ${NaN}
  ${0b0011111111010101010101010101010101010101010101010101010101010101n} | ${0.3333333333333333}
  ${0b0100000000001001001000011111101101010100010001000010110100010001n} | ${3.14159265358979}
  ${0b0011111110111001100110011001100110011001100110011001100110011010n} | ${0.1}
`('binToFloat', ({ num, float }) => {
  const bin = numTo64BitBinary(num);
  expect(binToFloat(bin)).toBe(float);
});

test.each`
  float                      | num
  ${1}                       | ${0b0011111111110000000000000000000000000000000000000000000000000000n}
  ${1.0000000000000002}      | ${0b0011111111110000000000000000000000000000000000000000000000000001n}
  ${1.0000000000000004}      | ${0b0011111111110000000000000000000000000000000000000000000000000010n}
  ${2.0}                     | ${0b0100000000000000000000000000000000000000000000000000000000000000n}
  ${-2.0}                    | ${0b1100000000000000000000000000000000000000000000000000000000000000n}
  ${5e-324}                  | ${0b0000000000000000000000000000000000000000000000000000000000000001n}
  ${2.225073858507201e-308}  | ${0b0000000000001111111111111111111111111111111111111111111111111111n}
  ${2.2250738585072014e-308} | ${0b0000000000010000000000000000000000000000000000000000000000000000n}
  ${1.7976931348623157e308}  | ${0b0111111111101111111111111111111111111111111111111111111111111111n}
  ${0.0}                     | ${0b0000000000000000000000000000000000000000000000000000000000000000n}
  ${-0.0}                    | ${0b1000000000000000000000000000000000000000000000000000000000000000n}
  ${Infinity}                | ${0b0111111111110000000000000000000000000000000000000000000000000000n}
  ${-Infinity}               | ${0b1111111111110000000000000000000000000000000000000000000000000000n}
  ${NaN}                     | ${0b0111111111111000000000000000000000000000000000000000000000000000n}
  ${0.3333333333333333}      | ${0b0011111111010101010101010101010101010101010101010101010101010101n}
  ${3.14159265358979}        | ${0b0100000000001001001000011111101101010100010001000010110100010001n}
  ${0.1}                     | ${0b0011111110111001100110011001100110011001100110011001100110011010n}
`('floatToNum', ({ num, float }) => {
  expect(floatToNum(float)).toBe(num);
});
